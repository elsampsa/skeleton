

.. Welcome!
.. As you can see, these are comments: they start with two dots and a space
.. Sphinx is very sensitive to spaces, empty lines, etc. so it can sometimes be frustrating
.. Two dots and a space are also used for special tagging, inclusion, etc.  Like here, where we are creating an internal link:

.. _about:

.. So, lets start writing the documentation
.. Title fonts are written like this:

About this module
=================

Well, this module does actually nothing.

It's a skeleton module that servers as a template for python(3) projects:

.. Let's add an image.  Important note here: always when adding a tag with ".." remember to leave a blank line before it!

.. image:: images/skull.png
   :width: 10 %
   

Files
-----

This page has been produced with the file "skeleton/docs/intro.rst", which serves as a good starting point for this template/tutorial.  Go ahead and open it in your editor.  Open also "skeleton/docs/index.rst" and "skeleton/docs/conf.py".  Edit them accordingly.  Said that, let's take a closer look at the directory structure:

* skeleton/ : This is a "scaffold" directory, a necessary evil for packaging

  ================   ===============================================================================================================================
  README.md          Readme file in online markdown format (nice for github). Play around with online markdown `here <https://stackedit.io/editor>`_
  LICENSE.*          License text (say, LICENSE.LGPL3, LICENSE.MIT, etc.)
  CHANGELOG          Recent changes in the code
  setup.py           Python setup script for creating packages
  MANIFEST.in        used by setup.py
  ================   ===============================================================================================================================
|
* skeleton/docs/  : Documentation and autogenerated documentation lives here
  
  ================   ===============================================================================================================================
  index.html         Redirects to the autogenerated html [don't touch]
  index.rst          The main index start from here
  intro.rst          The file you are staring at the moment (or html version of it) 
  requirements.rst   What the user needs in order to use this module 
  examples.rst       Copy-pastable examples for the api user 
  submodules.rst     Documentation generated automatically from source code.  Just add a new entry here for each submodule, don't touch otherwise 
  license.rst        Copyright and License 
  authors.rst        Who is the maintainer & author
  compile.bash       Run this always after modifying your documents / source code [don't edit]
  clean.bash         Clean autogenerated documentation [don't edit]
  conf.py            Sphinx configuration file [maybe don't edit]
  snippets/          Example snippet source files and scripts for generating pages from them
  generated/         Auto-generated documents [don't touch]
  ================   ===============================================================================================================================
|
* skeleton/skeleton : This is where the actual python module lives
  
  ================   ===============================================================================================================================
  __init__.py        Python module initialization
  greeters/          Submodule
  ================   ===============================================================================================================================
  
  
The idea is, that you make a copy of the whole directory structure with all files within (remove ".git*", of course), edit and rename things and start developing your own python package based on this.

The scaffolding "double-directory" skeleton/skeleton structure might seem inconvenient at first, but here is what I do:

* Keep "scaffolded" python modules in, say "~/python3_packages".  For this case we would have "~/python3_packages/skeleton/" with subdirectory "~/python3_packages/skeleton/skeleton"
* You have probably set $PYTHONPATH to some default directory, let's say "~/python3"
* Do the following:

  ::
 
    ln -s ~/python3_packages/skeleton/skeleton ~/python3/

* Now the system can see the scaffolded python module

.. Let's create a sub-heading

It's time to start documenting!  Edit this file "intro.rst".  Here are `some nice tips <http://www.sphinx-doc.org/en/stable/rest.html>`_ for using Sphinx and here `are some more <http://www.sphinx-doc.org/en/stable/markup/inline.html>`_


Init and compile
----------------

For the first time, to init the documentation, do:

.. Let's create a copy-pastable section.  Beware!  Put in the :'s, spaces and newlines exactly like this

::

  cd docs
  ./clean.bash


To create and to recreate the docs (after changing the code, etc.), do:
  
::

  ./compile.bash
  
To see your documentation, launch

:: 

  firefox index.html
  
If you are using github, after creating the git repo, create also a site for your project like this:  Settings => GitHub pages => Source : master branch / docs folder => press Save.  Now your documentation is online in github! (of course you need to include the docs/ folder into git).


Organizing large python projects
--------------------------------

Let's say we have a python project that consists of "entities" and those consist of submodules.  Imagine a web-service of some sort with frontend, backend and some machine_learning behing:

.. Some more markup:
.. the line "|" forces the lines to be breaken explicitly
.. two stars "**" make boldface, single star italics

**macro_project**
  *frontend module*
    | submodule1
    | submodule2
  *backend module*
    | submodule1
    | submodule2
  *machine_learning module*
    | submodule1
    | submodule2
    

.. A numbered list
    
Here are some possibilities:

1. Clusterfuck
  * Keep everything in the same repository.  Avoid defining API interfaces.  Everybody can access all code.
  * We have all done this and it's not a good idea..
  
.. Nested lists must be separated with a blank line
  
2. Each module in a separate repository
  * Each module should have a maintainer and a well-defined API interface
  * Development 
  
    * Keep the cloned local git repositories at ~/python3_packages (as explained above)
    
  * Production
  
    * You can use pip(3) to install and update the packages directly from the git repository - convenient if the development/production cycle is fast
    * When installed with pip(3) there is no fiddling with paths and symlinks, it just works (if you're interested in details, pip(3) installs it under "~/.local/lib")
    * For example, this example python module could be installed magically with
    
    ::
    
      pip3 install git+https://github.com/elsampsa/skeleton
    


  


    